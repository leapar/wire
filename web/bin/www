#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('web:server');
var http = require('http');


//console.log(app);
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io = require('socket.io')(server);
/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}


io.on('connection', function (socket) {
    //console.log(socket.request.headers.cookie);
//	socket.disconnect();
    //监听新用户加入
    socket.on('login', function (clientInfo) {
    	console.log(clientInfo.username);
    //	getUser(clientInfo.jsid);
        //将新加入用户的唯一标识当作socket的名称，后面退出的时候会用到
      //  socket.userid = clientInfo.userid;

        //检查在线列表，如果不在里面就加入
        
        app.socketMap.set(socket, {ip:socket.handshake.address, username:clientInfo.username});
      //  console.log(  app.socketMap.length);
        //广播用户加入
        //io.emit('login', {onlineUsers: onlineUsers, onlineCount: onlineCount, user: obj});
        //console.log(clientInfo.username+"连接");
      //  console.log(app.socketMap);
        socket.emit('login_success', {username: clientInfo.username});
    });

    //监听用户退出
    socket.on('disconnect', function () {
        //将退出的用户从在线列表中删除
            var clientInfo = app.socketMap.get(socket);
            app.socketMap.delete(socket);

          //  console.log(clientInfo.username + '退出');
    });


});